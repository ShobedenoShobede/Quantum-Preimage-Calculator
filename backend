cd quantum-preimage-calculator/backend
touch server.js Dockerfile package.json
const express = require('express');
const crypto = require('crypto');
const bitcoin = require('bitcoinjs-lib');
const axios = require('axios');

const app = express();
app.use(express.json());

const cache = {};

// Endpoint: Calculate Preimages
app.post('/calculate-preimages', (req, res) => {
    const { hashes } = req.body;
    const results = hashes.map(hash => {
        if (cache[hash]) return { hash, preimage: cache[hash] };
        const preimage = crypto.createHash('sha256').update(hash).digest('hex');
        cache[hash] = preimage;
        return { hash, preimage };
    });
    res.json(results);
});

// Endpoint: Send Preimage to Wallet
app.post('/send-preimage', async (req, res) => {
    const { recipientAddress, preimage, privateKeyWIF } = req.body;
    try {
        const keyPair = bitcoin.ECPair.fromWIF(privateKeyWIF);
        const psbt = new bitcoin.Psbt();

        psbt.addInput({
            hash: 'your_input_txid_here',
            index: 0,
            nonWitnessUtxo: Buffer.from('your_raw_transaction_here', 'hex'),
        });

        psbt.addOutput({
            address: recipientAddress,
            value: 1000,
        });

        psbt.signInput(0, keyPair);
        psbt.finalizeAllInputs();

        const txHex = psbt.extractTransaction().toHex();
        const response = await axios.post('https://api.blockcypher.com/v1/btc/main/txs/push', { tx: txHex });

        res.json({ success: true, txid: response.data.tx.hash });
    } catch (error) {
        console.error('Error sending preimage:', error);
        res.status(500).send('Failed to send preimage.');
    }
});

// Endpoint: Generate Quantum-Safe Wallet
app.post('/generate-wallet', (req, res) => {
    const keyPair = bitcoin.ECPair.makeRandom();
    const { address } = bitcoin.payments.p2wpkh({ pubkey: keyPair.publicKey });
    const privateKeyWIF = keyPair.toWIF();

    res.json({ address, privateKey: privateKeyWIF });
});

app.listen(3000, () => console.log('Server running on port 3000'));
cd quantum-preimage-calculator/backend
npm install
node server.js
